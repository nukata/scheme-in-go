;; An example of iterator with call/cc
(define (traverse-tree tree-list)
  (letrec ((yield '__)
           (iterate (lambda (tree)
                      (if (pair? tree)
                          (begin (iterate (car tree))
                                 (iterate (cdr tree)))
                        (call/cc (lambda (k)
                                   (set! loop (lambda () (k '__)))
                                   (yield `(FOUND . ,tree)))))))
           (loop (lambda ()
                   (iterate tree-list)
                   (yield 'DONE))))
    (lambda ()
      (call/cc (lambda (k)
                 (set! yield k)
                 (loop))))))

(define (iterator-to-list iter)
  (let ((x (iter)))
    (if (eq? x 'DONE)
        '()
      (cons (cdr x) (iterator-to-list iter)))))

(display (iterator-to-list (traverse-tree '(1 . (2 . ((3 . 4) . 5))))))
(newline)
;; => (1 2 3 4 5)
